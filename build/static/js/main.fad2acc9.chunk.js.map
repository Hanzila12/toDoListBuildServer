{"version":3,"sources":["form.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","handleChange","event","newText","target","value","setState","text","handleKeyDown","key","submit","state","this","console","log","TextField","onChange","onKeyDown","fullWidth","label","margin","React","Component","TodosQuery","gql","UpdateMutation","RemoveMutation","CreateTodoMutation","App","updateTodo","todo","a","variables","id","complete","update","store","data","readQuery","query","todos","map","inputVal","writeQuery","toggleChecked","removeTodo","filter","createTodo","unshift","dataProps","checked","loading","style","display","width","Paper","elevation","List","ListItem","role","undefined","dense","button","onClick","Checkbox","disableRipple","ListItemText","primary","ListItemSecondaryAction","IconButton","compose","graphql","name","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fad2acc9.chunk.js","sourcesContent":["import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport default class Form extends React.Component {\r\n constructor(props) {\r\n  super(props);\r\n\r\n  this.state = {\r\n   text: \"\"\r\n  }\r\n }\r\n\r\n handleChange = (event) => {\r\n  const newText = event.target.value;\r\n  this.setState({\r\n   text: newText\r\n  })\r\n }\r\n handleKeyDown = (event) => {\r\n  if (event.key === 'Enter') {\r\n   this.props.submit(this.state.text);\r\n   this.setState({ text: \"\" });\r\n  }\r\n }\r\n\r\n render() {\r\n  const { text } = this.state\r\n  console.log(text);\r\n  return (\r\n   <form>\r\n    <TextField\r\n     onChange={this.handleChange}\r\n     onKeyDown={this.handleKeyDown}\r\n     fullWidth\r\n     label=\"Todo...\"\r\n     margin=\"normal\"\r\n    />\r\n   </form>\r\n\r\n  )\r\n }\r\n}","import React, { Component } from 'react';\nimport gql from \"graphql-tag\";\nimport { graphql } from 'react-apollo';\n\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Form from './form';\nimport compose from 'lodash.flowright'\n\n\nconst TodosQuery = gql`\nquery {\n  todos {\n    id\n    text\n    complete\n  }\n}\n`;\n//Define gql variables with $ and make sure variable types(ID,Boolean) match the mongoose schema\n//ex: $id: ID!\nconst UpdateMutation = gql`\n  mutation($id: ID!, $complete: Boolean!) {\n    updateTodo(id: $id, complete: $complete) \n  }\n`\nconst RemoveMutation = gql`\n  mutation($id: ID!) {\n    removeTodo(id: $id)\n  }\n`\nconst CreateTodoMutation = gql`\nmutation($text: String!) {\n  createTodo(text: $text) {\n    id\n    text\n    complete\n  }\n}\n`\n\n\nclass App extends Component {\n\n  updateTodo = async todo => {\n\n    //Update todo from database and frontend ui\n    await this.props.updateTodo({\n      variables: {\n        id: todo.id,\n        //input opposite of current todo's complete value:\n        complete: !todo.complete\n      },\n      //update the apollo cache with the new query information:\n      update: store => {\n        // Read the data from our cache for this query.\n        const data = store.readQuery({ query: TodosQuery });\n        //console.log(store);\n        // Add our comment from the mutation to the end.\n        //map through each todo and if current id matches todo id to update return current\n\n        data.todos = data.todos.map(\n          inputVal =>\n            //if current id matches todo id from the query\n            inputVal.id === todo.id\n              ? {\n                //keep all current todo's properties\n                ...todo,\n                //except change complete to its opposite:\n                complete: !todo.complete\n\n              }\n              //else return current non-updated todo\n              : inputVal\n        )\n\n        // Write our data back to the cache.\n        store.writeQuery({ query: TodosQuery, data })\n        //console.log(store);\n        this.toggleChecked(data.todos);\n      }\n    });\n  }\n\n  //Remove todo from database\n  removeTodo = async todo => {\n    //Remove todo from database and frontend ui\n    await this.props.removeTodo({\n      variables: {\n        id: todo.id\n      },\n      //update the apollo cache with the new query information:\n      update: store => {\n        // Read the data from our cache for this query.\n        const data = store.readQuery({ query: TodosQuery });\n        //map through each todo and if current id matches todo id to update return current\n        data.todos = data.todos.filter(\n          inputVal =>\n            //filter out todo if current id doesn't match todo id from the query\n            inputVal.id !== todo.id\n        )\n        // Write our data back to the cache.\n        store.writeQuery({ query: TodosQuery, data })\n\n      },\n\n    });\n  };\n\n  createTodo = async text => {\n    //Remove todo from database and frontend ui\n\n    await this.props.createTodo({\n      variables: {\n        text\n      },\n      //update the apollo cache with the new query information:\n      update: (store, { data: { createTodo } }) => {\n\n        // Read the data from our cache for this query.\n        const data = store.readQuery({ query: TodosQuery });\n        //map through each todo and if current id matches todo id to update return current\n        data.todos = data.todos.unshift(createTodo)\n        // Write our data back to the cache.\n\n        store.writeQuery({ query: TodosQuery, data })\n      }\n    });\n  };\n\n\n  toggleChecked = dataProps => {\n    //update checkbox in props\n    //console.log(dataProps);\n    return dataProps.checked = !dataProps.checked;\n  }\n\n\n\n  render() {\n    //Save the mongodb todos and loading status to props\n    const {\n      data: { loading, todos }\n    } = this.props;\n    if (loading) {\n      return null;\n    }\n\n    return (\n      <div style={{ display: \"flex\" }}>\n        <div style={{ margin: \"auto\", width: 400 }}>\n          {/* Paper component is a material ui background */}\n          <Paper elevation={1}>\n            <Form submit={this.createTodo} />\n            <List>\n\n              {/* each todo from the database is mapped to a list item React component */}\n              {todos.map(todo =>\n                <ListItem\n                  key={todo.id}\n                  role={undefined}\n                  dense\n                  button\n                  //call update todo function when list item is clicked\n                  onClick={() => this.updateTodo(todo)}\n                >\n                  <Checkbox\n                    // each todo's complete status is \n                    //set as the checked state in the checkbox component\n                    checked={todo.complete}\n                    //tabIndex={-1}\n                    disableRipple\n                  />\n                  {/* text from the todo is set to the ListItemText component's primary text */}\n                  <ListItemText primary={todo.text} />\n                  <ListItemSecondaryAction>\n                    {/* Call remove function when iconbutton component is clicked */}\n                    {/* <IconButton onClick={() => this.removeTodo(todo)}> */}\n                    <IconButton onClick={() => this.removeTodo(todo)}>\n                      <CloseIcon />\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              )}\n            </List>\n          </Paper>\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default compose(\n  graphql(CreateTodoMutation, { name: \"createTodo\" }),\n  graphql(RemoveMutation, { name: \"removeTodo\" }),\n  graphql(UpdateMutation, { name: \"updateTodo\" }),\n  graphql(TodosQuery)\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from \"react-apollo\";\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/',\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}